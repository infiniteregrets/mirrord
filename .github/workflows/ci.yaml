name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main, v2.0 ]
  pull_request:
    branches: [ main, v2.0 ]

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       profile: minimal
  #       toolchain: nightly
  #       components: rustfmt, clippy
  #   # Needed for agent
  #   - run: sudo apt install libpcap-dev cmake
  #   - run: cargo fmt --all -- --check
  #   - run: cargo clippy -- -D warnings

  # test_mirrord_protocol:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, ubuntu-18.04, macos-12, macos-11, macos-10.15]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       profile: minimal
  #       toolchain: nightly
  #   - run: cd mirrord-protocol && cargo test

  # test_agent:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       profile: minimal
  #       toolchain: nightly
  #   - run: sudo apt install -y libpcap-dev cmake
  #   - run: sudo PATH=/home/runner/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin:/usr/bin:/usr/sbin /home/runner/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo test --manifest-path mirrord-agent/Cargo.toml 

  # test_agent_image:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build image
  #     run: docker build . --file mirrord-agent/Dockerfile

  
  # test_mirrord_layer:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, ubuntu-18.04, macos-12, macos-11, macos-10.15]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions-rs/toolchain@v1
  #     with:
  #       profile: minimal
  #       toolchain: nightly
  #   # For now, just evrify it compiles.
  #   - run: cargo +nightly build --manifest-path=mirrord-layer/Cargo.toml
  e2e:
      runs-on: ubuntu-latest
      name: e2e
      steps:      
        - uses: actions/checkout@v2
        - uses: actions-rs/toolchain@v1  
          with:
            profile: minimal
            toolchain: nightly      
        - name: start minikube
          uses: medyagh/setup-minikube@master          
          with:
            container-runtime: containerd
        - name: setup nginx
          run: kubectl apply -f $(pwd)/e2e/app.yaml
        - name: install dependencies
          run: sudo bash e2e/setup.sh         
        - name: add rustfmt 
          run: rustup component add rustfmt --toolchain nightly-x86_64-unknown-linux-gnu     
        - name: build mirrord
          run: cargo +nightly build --manifest-path=./Cargo.toml                  
        - name: run node tests
          run: bash e2e/post.sh "node" e2e/node-e2e/app.js $(minikube service nginx --url) $(pwd) $(kubectl get pods -o custom-columns=:metadata.name | grep nginx)                         
        # - name: build rust test 
        #   run: cargo +nightly build --manifest-path e2e/rust-e2e/Cargo.toml
        # - name: run rust tests
        #   run: bash e2e/post.sh e2e/rust-e2e/target/debug/rust-e2e - $(minikube service nginx --url) $(pwd) $(kubectl get pods -o custom-columns=:metadata.name | grep nginx) 
        - name: verify job cleanup
          run: bash e2e/verify.sh
        - name: test mirrord extract  
          run: bash e2e/extract.sh