name: CI

on:
  workflow_dispatch:
  push:
    branches: [main, v2.0]
  pull_request:
    branches: [main, v2.0]

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         components: rustfmt, clippy
  #     - uses: Swatinem/rust-cache@v1
  #     # Needed for agent
  #     - run: sudo apt install libpcap-dev cmake
  #     - run: cargo fmt --all -- --check
  #     - run: cargo clippy -- -D warnings

  # test_mirrord_protocol:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         target: ${{matrix.target}}
  #     - uses: Swatinem/rust-cache@v1
  #       with:
  #         key: ${{matrix.os}}
  #     - run: |
  #         cd mirrord-protocol
  #         cargo test
  # test_agent:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         components: rustfmt
  #     - uses: Swatinem/rust-cache@v1
  #     - run: sudo apt install -y libpcap-dev cmake
  #     - run: sudo PATH=/home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin:/usr/bin:/usr/sbin /home/runner/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/cargo test -p mirrord-agent

  # test_agent_image:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: docker/setup-buildx-action@v2
  #     - name: build and export
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         tags: test
  #         file: mirrord-agent/Dockerfile
  #         outputs: type=docker,dest=/tmp/test.tar
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #     - name: upload image
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: test
  #         path: /tmp/test.tar

  # test_mirrord_layer_cli:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-12, macos-11]
  #       target:
  #         [x86_64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
  #       exclude:
  #         - os: ubuntu-latest
  #           target: x86_64-apple-darwin
  #         - os: ubuntu-latest
  #           target: aarch64-apple-darwin
  #         - os: macos-12
  #           target: x86_64-unknown-linux-gnu
  #         - os: macos-11
  #           target: aarch64-apple-darwin
  #         - os: macos-11
  #           target: x86_64-unknown-linux-gnu
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         target: ${{matrix.target}}
  #     - uses: Swatinem/rust-cache@v1
  #       with:
  #         key: ${{matrix.os}}-${{matrix.target}}
  #     # For now, just verify it compiles.
  #     - run: cargo +nightly build -p mirrord-layer -p mirrord --target=${{matrix.target}}

  # build_mirrord:
  #   runs-on: ubuntu-latest
  #   name: build mirrord
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         components: rustfmt
  #     - uses: Swatinem/rust-cache@v1
  #       with:
  #         key: ubuntu-latest
  #     - run: sudo apt install -y libpcap-dev cmake
  #     - run: cargo +nightly build --manifest-path=./Cargo.toml

  # e2e:
  #   runs-on: ubuntu-latest
  #   name: e2e
  #   needs: [build_mirrord, test_agent_image]
  #   env:
  #     MIRRORD_AGENT_RUST_LOG: "warn,mirrord=debug"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         components: rustfmt
  #     - uses: Swatinem/rust-cache@v1
  #       with:
  #         key: ubuntu-latest
  #         cache-on-failure: true

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 14
  #     - run: npm install express
  #     - run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y libpcap-dev cmake
  #     - uses: actions/setup-python@v3
  #     - run: pip3 install flask
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: "1.18.0"
  #     - run: |
  #         cd tests/go-e2e
  #         go build
  #     - run: |
  #         cd tests/go-e2e-fileops
  #         go build          
  #     - name: start minikube
  #       uses: medyagh/setup-minikube@master
  #       with:
  #         container-runtime: containerd
  #     - name: download image
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: test
  #         path: /tmp
  #     - run: minikube image load /tmp/test.tar
  #     - name: cargo test
  #       run: cargo test -p tests
  #     - name: switch minikube runtime
  #       run: |
  #         minikube delete
  #         minikube start --container-runtime=docker
  #         minikube image load /tmp/test.tar
  #     - name: test with docker runtime
  #       run: cargo test -p tests
  #     - name: Collect logs
  #       if: ${{ failure() }}
  #       run: |
  #         kubectl describe pods
  #         docker exec minikube find /var/log/pods -print -exec cat {} \;

  # e2e_macos:
  #   runs-on: macos-12
  #   name: e2e macOS
  #   needs: [build_mirrord, test_agent_image]
  #   env:
  #     MIRRORD_AGENT_RUST_LOG: "warn,mirrord=debug"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         components: rustfmt
  #     - uses: Swatinem/rust-cache@v1
  #       with:
  #         key: macos-latest
  #         cache-on-failure: true
  #     - run: npm install express
  #     - uses: actions/setup-python@v3
  #     - run: pip3 install flask
  #     - name: setup cluster requirements
  #       run: brew install docker colima kubectl
  #     - name: create cluster
  #       run: colima start --kubernetes --network-address --cpu 3 --memory 8
  #     - name: download image
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: test
  #         path: /tmp
  #     - name: load image
  #       run: docker load --input /tmp/test.tar
  #     - name: cargo test
  #       run: cargo test -p tests test_mirror_http_traffic
  #     - name: Collect container logs
  #       if: ${{ failure() }}
  #       run: for CONTAINER in $(docker ps --format "{{.ID}}"); do echo $CONTAINER && docker logs $CONTAINER; done

  build_binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            extension: so
            target: x86_64-unknown-linux-gnu
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: ${{matrix.target}}
      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{matrix.target}}-${{matrix.os}}
      - name: build mirrord-layer and cli
        run: cargo +nightly build --release -p mirrord -p mirrord-layer --target=${{matrix.target}}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.target}}
          path: |
            target/${{matrix.target}}/release/mirrord
            target/${{matrix.target}}/release/libmirrord_layer.${{matrix.extension}}
          if-no-files-found: error

  build_binaries_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: aarch64-apple-darwin
      - uses: Swatinem/rust-cache@v1
      - name: build mirrord-layer x86-64
        run: cargo +nightly build --release -p mirrord-layer --target=x86_64-apple-darwin
      - name: build mirrord-layer macOS arm
        run: cargo +nightly build --release -p mirrord-layer --target=aarch64-apple-darwin
      - name: create universal target dir
        run: mkdir -p /tmp/target/universal-apple-darwin/release
      - name: create universal dylib
        run: lipo -create -output /tmp/target/universal-apple-darwin/release/libmirrord_layer.dylib target/aarch64-apple-darwin/release/libmirrord_layer.dylib target/x86_64-apple-darwin/release/libmirrord_layer.dylib
      - name: build macOS arm cli with universal dylib
        env:
          MIRRORD_LAYER_FILE: /tmp/target/universal-apple-darwin/release/libmirrord_layer.dylib
        run: cargo +nightly build --release -p mirrord --target=aarch64-apple-darwin
      - name: build macOS x86-64 cli with universal dylib
        env:
          MIRRORD_LAYER_FILE: /tmp/target/universal-apple-darwin/release/libmirrord_layer.dylib
        run: cargo +nightly build --release -p mirrord --target=x86_64-apple-darwin
      - name: create universal macOS cli
        run: lipo -create -output /tmp/target/universal-apple-darwin/release/mirrord target/aarch64-apple-darwin/release/mirrord target/x86_64-apple-darwin/release/mirrord
      - name: adjust directory layout for upload
        run: cp -rf /tmp/target .
      - uses: actions/upload-artifact@v3
        with:
          name: universal-apple-darwin
          path: |
            target/universal-apple-darwin/release/mirrord
            target/universal-apple-darwin/release/libmirrord_layer.dylib
          if-no-files-found: error

  release_intellij_plugin:
      needs: [ build_binaries, build_binaries_macos ]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: actions/download-artifact@v3
          with:
            path: /tmp/artifacts
        - name: Setup Java
          uses: actions/setup-java@v3
          with:
            distribution: zulu
            java-version: 11
        - run: cp LICENSE intellij-ext/
        - run: mv /tmp/artifacts/x86_64-unknown-linux-gnu/libmirrord_layer.* intellij-ext/        
        - name: Publish Plugin
          env:
            PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
            CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
            PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
            PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
          run: ./gradlew publishPlugin        
