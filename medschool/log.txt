yo yo
yo yo PartialType {
    ident: "AgentConfig",
    docs: [
        "Configuration for the mirrord-agent pod that is spawned in the Kubernetes cluster.\n",
        "\n",
        "We provide sane defaults for this option, so you don't have to set up anything here.\n",
        "\n",
        "```json\n",
        "{\n",
        "  \"agent\": {\n",
        "    \"log_level\": \"info\",\n",
        "    \"namespace\": \"default\",\n",
        "    \"image\": \"ghcr.io/metalbear-co/mirrord:latest\",\n",
        "    \"image_pull_policy\": \"IfNotPresent\",\n",
        "    \"image_pull_secrets\": [ { \"secret-key\": \"secret\" } ],\n",
        "    \"ttl\": 30,\n",
        "    \"ephemeral\": false,\n",
        "    \"communication_timeout\": 30,\n",
        "    \"startup_timeout\": 360,\n",
        "    \"network_interface\": \"eth0\",\n",
        "    \"pause\": false,\n",
        "    \"flush_connections\": false,\n",
        "  }\n",
        "}\n",
        "```\n",
        "\n",
    ],
    fields: {
        PartialField {
            ident: "check_out_of_pods",
            ty: "bool",
            docs: [
                "### agent.check_out_of_pods {#agent-check_out_of_pods}\n",
                "\n",
                "Determine if to check whether there is room for agent job in target node. (Not applicable\n",
                "when using ephemeral containers feature)\n",
                "\n",
                "Can be disabled if the check takes too long and you are sure there is enough resources on\n",
                "each node\n",
                "\n",
            ],
        },
        PartialField {
            ident: "communication_timeout",
            ty: "u16",
            docs: [
                "### agent.communication_timeout {#agent-communication_timeout}\n",
                "\n",
                "Controls how long the agent lives when there are no connections.\n",
                "\n",
                "Each connection has its own heartbeat mechanism, so even if the local application has no\n",
                "messages, the agent stays alive until there are no more heartbeat messages.\n",
                "\n",
            ],
        },
        PartialField {
            ident: "disabled_capabilities",
            ty: "LinuxCapability",
            docs: [
                "### agent.disabled_capabilities {#agent-disabled_capabilities}\n",
                "\n",
                "Disables specified Linux capabilities for the agent container.\n",
                "If nothing is disabled here, agent uses `NET_ADMIN`, `NET_RAW`, `SYS_PTRACE` and\n",
                "`SYS_ADMIN`.\n",
                "\n",
            ],
        },
        PartialField {
            ident: "dns",
            ty: "AgentDnsConfig",
            docs: [
                "### agent.dns {#agent-dns}\n",
                "\n",
            ],
        },
        PartialField {
            ident: "ephemeral",
            ty: "bool",
            docs: [
                "### agent.ephemeral {#agent-ephemeral}\n",
                "\n",
                "Runs the agent as an\n",
                "[ephemeral container](https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/)\n",
                "\n",
                "Defaults to `false`.\n",
                "\n",
            ],
        },
        PartialField {
            ident: "flush_connections",
            ty: "bool",
            docs: [
                "### agent.flush_connections {#agent-flush_connections}\n",
                "\n",
                "Flushes existing connections when starting to steal, might fix issues where connections\n",
                "aren't stolen (due to being already established)\n",
                "\n",
                "Defaults to `true`.\n",
                "\n",
            ],
        },
        PartialField {
            ident: "image",
            ty: "AgentImageConfig",
            docs: [
                "### agent.image {#agent-image}\n",
                "\n",
            ],
        },
        PartialField {
            ident: "image_pull_policy",
            ty: "String",
            docs: [
                "### agent.image_pull_policy {#agent-image_pull_policy}\n",
                "\n",
                "Controls when a new agent image is downloaded.\n",
                "\n",
                "Supports `\"IfNotPresent\"`, `\"Always\"`, `\"Never\"`, or any valid kubernetes\n",
                "[image pull policy](https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy)\n",
                "\n",
                "Defaults to `\"IfNotPresent\"`\n",
                "\n",
            ],
        },
        PartialField {
            ident: "image_pull_secrets",
            ty: "String",
            docs: [
                "### agent.image_pull_secrets {#agent-image_pull_secrets}\n",
                "\n",
                "List of secrets the agent pod has access to.\n",
                "\n",
                "Takes an array of hash with the format `{ name: <secret-name> }`.\n",
                "\n",
                "Read more [here](https://kubernetes.io/docs/concepts/containers/images/).\n",
                "\n",
                "```json\n",
                "{\n",
                "  \"agent\": {\n",
                "    \"image_pull_secrets\": [\n",
                "      { \"very-secret\": \"secret-key\" },\n",
                "      { \"very-secret\": \"keep-your-secrets\" }\n",
                "    ]\n",
                "  }\n",
                "}\n",
                "```\n",
                "\n",
            ],
        },
        PartialField {
            ident: "log_level",
            ty: "String",
            docs: [
                "### agent.log_level {#agent-log_level}\n",
                "\n",
                "Log level for the agent.\n",
                "\n",
                "\n",
                "Supports `\"trace\"`, `\"debug\"`, `\"info\"`, `\"warn\"`, `\"error\"`, or any string that would work\n",
                "with `RUST_LOG`.\n",
                "\n",
                "```json\n",
                "{\n",
                "  \"agent\": {\n",
                "    \"log_level\": \"mirrord=debug,warn\"\n",
                "  }\n",
                "}\n",
                "```\n",
                "\n",
            ],
        },
        PartialField {
            ident: "namespace",
            ty: "String",
            docs: [
                "### agent.namespace {#agent-namespace}\n",
                "\n",
                "Namespace where the agent shall live.\n",
                "Note: Doesn't work with ephemeral containers.\n",
                "Defaults to the current kubernetes namespace.\n",
                "\n",
            ],
        },
        PartialField {
            ident: "network_interface",
            ty: "String",
            docs: [
                "### agent.network_interface {#agent-network_interface}\n",
                "\n",
                "Which network interface to use for mirroring.\n",
                "\n",
                "The default behavior is try to access the internet and use that interface. If that fails\n",
                "it uses `eth0`.\n",
                "\n",
            ],
        },
        PartialField {
            ident: "nftables",
            ty: "bool",
            docs: [
                "### agent.nftables {#agent-nftables}\n",
                "\n",
                "Use iptables-nft instead of iptables-legacy.\n",
                "Defaults to `false`.\n",
                "\n",
                "Needed if your mesh uses nftables instead of iptables-legacy,\n",
                "\n",
            ],
        },
        PartialField {
            ident: "privileged",
            ty: "bool",
            docs: [
                "### agent.privileged {#agent-privileged}\n",
                "\n",
                "Run the mirror agent as privileged container.\n",
                "Defaults to `false`.\n",
                "\n",
                "Might be needed in strict environments such as Bottlerocket.\n",
                "\n",
            ],
        },
        PartialField {
            ident: "resources",
            ty: "ResourceRequirements",
            docs: [
                "### agent.resources {#agent-resources}\n",
                "\n",
                "Set pod resource reqirements. (not with ephemeral agents)\n",
                "Default is\n",
                "```json\n",
                "{\n",
                "  \"requests\":\n",
                "  {\n",
                "    \"cpu\": \"1m\",\n",
                "    \"memory\": \"1Mi\"\n",
                "  },\n",
                "  \"limits\":\n",
                "  {\n",
                "    \"cpu\": \"100m\",\n",
                "      \"memory\": \"100Mi\"\n",
                "  }\n",
                "}\n",
                "```\n",
                "\n",
            ],
        },
        PartialField {
            ident: "startup_timeout",
            ty: "u64",
            docs: [
                "### agent.startup_timeout {#agent-startup_timeout}\n",
                "\n",
                "Controls how long to wait for the agent to finish initialization.\n",
                "\n",
                "If initialization takes longer than this value, mirrord exits.\n",
                "\n",
                "Defaults to `60`.\n",
                "\n",
            ],
        },
        PartialField {
            ident: "test_error",
            ty: "bool",
            docs: [],
        },
        PartialField {
            ident: "tolerations",
            ty: "Toleration",
            docs: [
                "### agent.tolerations {#agent-tolerations}\n",
                "\n",
                "Set pod tolerations. (not with ephemeral agents)\n",
                "Default is\n",
                "```json\n",
                "[\n",
                "  {\n",
                "    \"operator\": \"Exists\"\n",
                "  }\n",
                "]\n",
                "```\n",
                "\n",
                "Set to an empty array to have no tolerations at all\n",
                "\n",
            ],
        },
        PartialField {
            ident: "ttl",
            ty: "u16",
            docs: [
                "### agent.ttl {#agent-ttl}\n",
                "\n",
                "Controls how long the agent pod persists for after the agent exits (in seconds).\n",
                "\n",
                "Can be useful for collecting logs.\n",
                "\n",
                "Defaults to `1`.\n",
                "\n",
            ],
        },
    },
}
